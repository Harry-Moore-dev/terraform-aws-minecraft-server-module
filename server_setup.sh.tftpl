#!/bin/bash

# Update package lists
sudo yum update
sudo yum install -y java-17-amazon-corretto-headless

# Change directory to the server folder and setup a minecraft user
adduser minecraft
mkdir /opt/minecraft/
mkdir /opt/minecraft/server/
cd /opt/minecraft/server

# Copy the saves from s3
mkdir /opt/minecraft/server/${level_name}
aws s3 sync s3://${save_bucket_full_path} /opt/minecraft/server/${level_name} --region ${region}

# Download the latest version of the Minecraft server files
VERSION_MANIFEST_URL="https://launchermeta.mojang.com/mc/game/version_manifest.json"
MANIFEST_JSON=$(curl -s $VERSION_MANIFEST_URL)

# Extracting the URL for the latest release version or target version if specified
if [ -z ${minecraft_version} ]; then
    TARGET_RELEASE=$(echo $MANIFEST_JSON | jq -r '.latest.release')
else
    TARGET_RELEASE=$minecraft_version
fi

# Finding the URL for the latest release version
URL=$(echo $MANIFEST_JSON | jq -r --arg TARGET_RELEASE "$TARGET_RELEASE" '.versions[] | select(.id == $TARGET_RELEASE) | .url')

# Fetching the JSON for the latest release version
VERSION_JSON=$(curl -s $URL)

# Extracting the URL for the latest server.jar
SERVER_JAR_URL=$(echo $VERSION_JSON | jq -r '.downloads.server.url')

# Downloading the latest server.jar
echo "Downloading the latest server.jar from: $SERVER_JAR_URL"
curl -o minecraft_server_$TARGET_RELEASE.jar $SERVER_JAR_URL

# Make the server executable
chmod +x minecraft_server_$TARGET_RELEASE.jar

# Accept the EULA
echo "eula=true" > eula.txt

# Create the server.properties file
echo """
enable-jmx-monitoring=false
rcon.port=25575
level-seed=${custom_seed}
gamemode=${game_mode}
enable-command-block=${enable_command_block}
enable-query=false
generator-settings={}
enforce-secure-profile=true
level-name=${level_name}
motd=${name}
query.port=${server_port}
pvp=${pvp}
generate-structures=${generate_structures}
max-chained-neighbor-updates=1000000
difficulty=${difficulty}
network-compression-threshold=256
max-tick-time=60000
require-resource-pack=false
use-native-transport=true
max-players=${max_players}
online-mode=true
enable-status=true
allow-flight=${allow_flight}
initial-disabled-packs=
broadcast-rcon-to-ops=true
view-distance=${view_distance}
server-ip=
resource-pack-prompt=
allow-nether=${allow_nether}
server-port=${server_port}
enable-rcon=false
sync-chunk-writes=true
op-permission-level=4
prevent-proxy-connections=false
hide-online-players=false
resource-pack=${resource_pack}
entity-broadcast-range-percentage=100
simulation-distance=${simulation_distance}
rcon.password=
player-idle-timeout=${player_idle_timeout}
force-gamemode=${force_gamemode}
rate-limit=0
hardcore=${hardcore}
white-list=${whitelist_enabled}
broadcast-console-to-ops=true
spawn-npcs=${spawn_npcs}
spawn-animals=${spawn_animals}
log-ips=true
function-permission-level=2
initial-enabled-packs=vanilla
level-type=${level_type}
text-filtering-config=
spawn-monsters=${spawn_monsters}
enforce-whitelist=${whitelist_enabled}
spawn-protection=16
resource-pack-sha1=
max-world-size=${max_world_size}
""" > server.properties

# Allow the minecraft user to own the server files
chown -R minecraft:minecraft /opt/minecraft/

# Create whitelist.json file
echo "${whitelisted_users}" > whitelist.json

# Create SystemD Script to run Minecraft server jar on reboot and start the server
echo """
#!/bin/bash
java -Xms${allocated_memory}M -Xmx${allocated_memory}M -jar minecraft_server_$TARGET_RELEASE.jar nogui
""" > start
chmod +x start
echo '''
#!/bin/bash
kill -9 $(ps -ef | pgrep -f "java")
''' > stop
chmod +x stop
cd /etc/systemd/system/
echo '''
[Unit]
Description=Minecraft Server on start up
Wants=network-online.target
[Service]
User=minecraft
WorkingDirectory=/opt/minecraft/server
ExecStart=/bin/bash /opt/minecraft/server/start
StandardInput=null
[Install]
WantedBy=multi-user.target
''' > minecraft.service
sudo systemctl daemon-reload
sudo systemctl enable minecraft.service
sudo systemctl start minecraft.service

# Setup shutdown hook to save the world to s3 before shutting down
echo """
#!/bin/bash
systemctl stop minecraft.service
aws s3 cp /opt/minecraft/server/${level_name} s3://${save_bucket_full_path} --recursive --region ${region}
""" > shutdown_script.sh
sudo cp shutdown_script.sh /etc/init.d/
sudo chmod +x /etc/init.d/shutdown_script.sh
sudo ln -s /etc/init.d/shutdown_script.sh /etc/rc0.d/K01shutdown_script.sh

# Add cron job to execute backup every half hour
echo """
#!/bin/bash
aws s3 cp /opt/minecraft/server/${level_name} s3://${save_bucket_full_path} --recursive --region ${region}
""" > backup_script.sh
sudo cp shutdown_script.sh /etc/init.d/
sudo chmod +x /etc/init.d/shutdown_script.sh
(crontab -l ; echo "*/30 * * * * /etc/init.d/backup_script.sh") | crontab -
